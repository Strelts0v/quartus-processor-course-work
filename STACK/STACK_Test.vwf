/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("input_data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("input_data[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("input_data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "input_data";
}

SIGNAL("out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("out[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "out";
}

SIGNAL("pop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("pop_overflow")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("push")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("push_overflow")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("stack_pointer_address")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("stack_pointer_address[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stack_pointer_address";
}

SIGNAL("stack_pointer_address[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stack_pointer_address";
}

SIGNAL("stack_pointer_address[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stack_pointer_address";
}

SIGNAL("stack_pointer_address[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "stack_pointer_address";
}

TRANSITION_LIST("input_data[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 430.0;
		LEVEL 1 FOR 430.0;
		LEVEL 0 FOR 140.0;
	}
}

TRANSITION_LIST("input_data[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 210.0;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 140.0;
	}
}

TRANSITION_LIST("input_data[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 110.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("input_data[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 50.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 50.0;
		}
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("input_data[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("input_data[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 12;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("input_data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 24;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("input_data[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("out[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 437.5;
		NODE
		{
			REPEAT = 21;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 135.0;
	}
}

TRANSITION_LIST("out[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 237.5;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 232.5;
		NODE
		{
			REPEAT = 10;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 135.0;
	}
}

TRANSITION_LIST("out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 117.5;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 112.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 132.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 112.5;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 112.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 97.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 72.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 52.5;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 7.5;
				LEVEL 0 FOR 12.5;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 7.5;
				LEVEL 0 FOR 72.5;
				LEVEL 1 FOR 7.5;
				LEVEL 0 FOR 12.5;
			}
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 52.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 35.0;
	}
}

TRANSITION_LIST("out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 57.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 52.5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 32.5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 32.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 52.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 32.5;
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 57.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 10;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 52.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 35.0;
	}
}

TRANSITION_LIST("out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 57.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 22;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 32.5;
		}
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 15.0;
	}
}

TRANSITION_LIST("out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 57.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 45;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("pop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 67.5;
		LEVEL 1 FOR 2.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 2.5;
		}
		LEVEL 0 FOR 15.0;
		LEVEL 1 FOR 5.0;
		NODE
		{
			REPEAT = 44;
			LEVEL 0 FOR 15.0;
			LEVEL 1 FOR 5.0;
		}
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("pop_overflow")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("push")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 2.5;
		}
		LEVEL 0 FOR 37.5;
		LEVEL 1 FOR 2.5;
		NODE
		{
			REPEAT = 90;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 2.5;
		}
	}
}

TRANSITION_LIST("push_overflow")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 97.5;
		NODE
		{
			REPEAT = 45;
			LEVEL 1 FOR 7.5;
			LEVEL 0 FOR 12.5;
		}
		LEVEL 1 FOR 2.5;
	}
}

TRANSITION_LIST("stack_pointer_address[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 67.5;
		LEVEL 0 FOR 932.5;
	}
}

TRANSITION_LIST("stack_pointer_address[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 37.5;
		LEVEL 0 FOR 962.5;
	}
}

TRANSITION_LIST("stack_pointer_address[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 17.5;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 942.5;
	}
}

TRANSITION_LIST("stack_pointer_address[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 7.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 45;
			LEVEL 0 FOR 7.5;
			LEVEL 1 FOR 12.5;
		}
		LEVEL 0 FOR 2.5;
	}
}

DISPLAY_LINE
{
	CHANNEL = "input_data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "input_data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16, 17;
}

DISPLAY_LINE
{
	CHANNEL = "out[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "pop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "pop_overflow";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "push";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "push_overflow";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "stack_pointer_address";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
	CHILDREN = 23, 24, 25, 26;
}

DISPLAY_LINE
{
	CHANNEL = "stack_pointer_address[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "stack_pointer_address[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "stack_pointer_address[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "stack_pointer_address[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 22;
}

TIME_BAR
{
	TIME = 22800;
	MASTER = TRUE;
}
;
